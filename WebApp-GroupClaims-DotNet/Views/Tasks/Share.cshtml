@{
    ViewBag.Title = "Share";
}

@Scripts.Render("~/Scripts/AadPickerLibrary")
@Scripts.Render("~/Scripts/adal")

<iframe id="adal-iframe" hidden></iframe>

@if (User.Identity.IsAuthenticated)
{
    using (Html.BeginForm("Share", "Tasks", FormMethod.Post, new { id = "share-form", onsubmit="return preProcessForm()" }))
    {
        <button name="delete" value="" style="display:none"></button>
        <input type="text" name="taskId" value="@ViewData["taskId"]" hidden />
        
        <div>
            <h3>@ViewData["taskText"]</h3>
            <input id="hidden-input" type="hidden" name="objectId" />
            <input id="hidden-input" type="hidden" name="displayName" />
            <p class="assign-role-label">Search for Users/Groups:</p>
            <input id="search" type="text" name="input">
            <button name="shareTasks" value="Share Task" id="submit-button">Share Task</button>
            <div style="height:20px">
                <p id="validation-error" style="color:red" hidden>Please select a user or group.</p>
            </div>
        </div>     
    
        <div class="container share-list" style="padding-top:10px">
            <div class="row">
                <div class="col-md-2"><h4>Shared With</h4></div>
                <div class="col-md-5"><h4>Object Id</h4></div>
                <div class="col-md-1"></div>
                <div class="col-md-4"></div>
            </div>


            @foreach (WebAppGroupClaimsDotNet.Models.AadObject share in (List<WebAppGroupClaimsDotNet.Models.AadObject>)ViewData["shares"])
            {
                if (share.AadObjectID != (string)ViewData["userId"])
                { 
                    <div class="row">
                        <div class="col-md-2">
                            @share.DisplayName
                        </div>
                        <div class="col-md-5">
                            @share.AadObjectID
                        </div>
                        <div class="col-md-1">
                            <button name="delete" value="@share.AadObjectID" class="remove-button"><a class="share-link">Remove</a></button>
                        </div>
                        <div class="col-md-4"></div>
                    </div>
                }
            }
                    

        </div>


    <a href="/Tasks/Index">&lt;&lt; Return to Tasks</a>

    }

    <script>
        // Here, we use adal.js to acquire a token for the Graph API,
        // and pass it to the AadPicker library to use in searching for users and groups.
        
        // Set necessary configuration values for adal.js
        window.config = {
            instance: 'https://login.microsoftonline.com/',
            tenant: '@ViewData["tenant"]',
            clientId: '@ViewData["clientId"]',
            postLogoutRedirectUri: window.location.origin,
            cacheLocation: 'localStorage',
        };

        // Initiate the adal.js AuthenticationContext
        var authContext = new AuthenticationContext(config);

        // We use a hidden iframe to acquire an id_token that adal.js requires.
        if (window.self !== window.top) {
            authContext.handleWindowCallback();
            if (authContext.getLoginError())
                window.top.location = '/Error/ShowError?signIn=true&errorMessage=Error Acquiring Token: ' + authContext.getLoginError();
            if (!authContext.getCachedUser())
                window.authContext.login();

        // Once adal.js has acquired an id_token in an iframe, the top level window can acquire a token for the graph
            else window.top.startPicker();
        } else $("#adal-iframe").attr('src', '/Tasks/Share');

        // Set the necessary configurations for the AadPicker library.
        var maxResultsPerPage = 14;
        var input = document.getElementById("search");
        var tenant = "@ViewData["tenant"]";

        // Acquire a token for the Graph API and pass it to the AadPicker library.
        window.startPicker = function () {
            if (window.hasOwnProperty('picker'))
                return;

            // Get a token for the People Picker
            authContext.getCachedUser();
            authContext.acquireToken('@ViewData["graphResourceId"]', function (error, token) {
                if (error || !token) {
                    window.location = '/Error/ShowError?signIn=true&errorMessage=Error Acquiring Token: ' + error;
                    return;
                }

                // Invoke the People Picker
                window.picker = new AadPicker(maxResultsPerPage, input, token, tenant);
            });
        };

        // When the form is submitted, validate the submission and gather the selected user/group from the AadPicker.
        function preProcessForm() {
            if (document.activeElement['name'] == 'delete')
                return true;
            if (!window.picker.Selected()) {
                $("#validation-error").show();
                return false;
            }
            var $form = $("#share-form");
            $form.get()[0].elements["objectId"].value = window.picker.Selected().objectId;
            $form.get()[0].elements["displayName"].value = window.picker.Selected().displayName;
        }

        // Hide any validation errors on search box re-focus
        $("#search").focus(function () {
            $("#validation-error").hide();
        });

    </script>
}

